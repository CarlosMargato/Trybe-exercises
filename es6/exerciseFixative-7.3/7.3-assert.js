// Acompanhe um exemplo do uso do m√≥dulo assert abaixo. Rode as express√µes separadamente,
// comentando a linha que n√£o ser√° executada para ver o resultado

const assert = require('assert');// Sintaxe para incluir o m√≥dulo assert

assert.strictEqual(50, 50); // Sem erros: 50 == 50
assert.strictEqual(50, 70); // AssertionError: 50 == 70

// Neste outro exemplo utilizamos o assert para testar o retorno esperado da fun√ß√£o division :

const assert = require('assert');

function division(x, y) {
  return x / y;
}

const expected = division(9, 3);

assert.strictEqual(expected, 3, 'Nove dividido por tr√™s √© igual a tr√™s');

// Alguns outros m√©todos do m√≥dulo assert que nos permite escrever testes s√£o:
// assert.strictEqual()
// assert.deepStrictEqual()
// assert.notStrictEqual()
// assert.ok()
// assert.fail()

// Podemos combinar v√°rios m√©todos do assert quando escrevemos nossos testes. 
// Isso pode ser muito √∫til para ampliar a cobertura do teste em casos de falhas! Observe:

const assert = require('assert');

function add(a, b) {
  return a + b;
}

const expected = add(1, 2);

assert.ok(expected === 3, 'Um mais dois √© igual a tr√™s'); // Checa se o primeiro argumento √© verdadeiro
assert.strictEqual(expected, 3, 'Um mais dois √© igual a tr√™s'); // Checa se o primeiro e segundo argumentos s√£o iguais em valor e tipo (===)
assert.notStrictEqual(expected, 4, 'Um mais dois √© igual a tr√™s (e n√£o quatro!)'); // Checa se o primeiro e segundo argumentos s√£o diferentes (!==)

// Lembre-se que a mensagem do erro aparece apenas quando o teste falha .
// Experimente alterar os par√¢metros de entrada da fun√ß√£o add e veja o resultado!
// √â poss√≠vel tamb√©m testar estruturas como arrays e objetos:

const assert = require('assert');

const list1 = [1, 2, 3, 4, 5];
const list2 = [1, 2, 3, 4, 5];

assert.deepStrictEqual(list1, list2, 'Erro: list1 e list2 n√£o s√£o estritamente iguais');

const person1 = { name: 'john', age: 21 };
const person2 = { name: 'john', age: 21 };

assert.deepStrictEqual(person1, person2, 'Erro: person1 e person2 n√£o s√£o estritamente iguais');

const person3 = { name: 'john', age: 19 };

assert.notDeepStrictEqual(person1, person3, 'Erro: os valores dos objetos s√£o estritamente iguais');

// Para que o teste falhe, experimente passar como segundo par√¢metro para o √∫ltimo teste o objeto person2 .
// Voc√™ ver√° que o teste ir√° falhar, pois ele espera que os valores dos objetos passados como argumento
// sejam diferentes.
// Pratique um pouco, escreva fun√ß√µes simples (soma, concatena√ß√£o de strings etc.) e crie testes utilizando
// os v√°rios m√©todos dispon√≠veis no m√≥dulo assert . Se precisar, consulte a tabela neste link com os m√©todos
// do assert mais utilizados!

// Um papel dos testes unit√°rios √© nos ajudar a implementar fun√ß√µes mais robustas.
// Veja, por exemplo, a fun√ß√£o que realiza a divis√£o utilizada no modelo anterior:

function division(x, y) {
  return x / y;
}

// O que acontece se criarmos o teste abaixo?

const assert = require('assert');

// declara√ß√£o da fun√ß√£o division, definida anteriormente...

assert.strictEqual(division(10, 2), 5); // OK
assert.strictEqual(division(10, 0), 0); // üí£

// O primeiro assert.strictEqual funciona e n√£o apresenta erro, mas o segundo deixa evidente uma fragilidade
// na implementa√ß√£o da fun√ß√£o division , pois n√£o poderia ser poss√≠vel realizar a divis√£o por 0.
// Nesse caso, devemos melhorar a implementa√ß√£o da fun√ß√£o division , a fim de n√£o termos mais esse estado
// inconsistente.
// Podemos fazer isso usando a palavra chave throw , que no javascript serve para lan√ßar um erro.
// Usaremos ele, ent√£o, para lan√ßar um erro caso o divisor y seja igual a zero.

const assert = require('assert');

function division(x, y) {
  if (y === 0) throw new Error('parameter y must not be 0');
  return x / y;
}

assert.strictEqual(division(10, 2), 5); // OK
assert.throws(() => { division(10, 0); }, /^Error: parameter y must not be 0$/); // OK

// Atualizamos o teste para refletir a mudan√ßa de implementa√ß√£o para essa situa√ß√£o,
// verificando n√£o s√≥ se o erro √© lan√ßado, mas tamb√©m se √© o erro esperado. Ou seja,
// os testes unit√°rios tamb√©m nos ajudam a identificar casos especiais que podem levar
// nossas fun√ß√µes a estados inv√°lidos.